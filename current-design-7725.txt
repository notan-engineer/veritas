# Veritas Project - Current Design & Architecture Overview

## Project Overview

**Veritas** is a modern news aggregation platform designed to combat information overload by providing factual, multi-sourced summaries of current events. The system transforms traditional news consumption by presenting verified information through structured "factoids" instead of lengthy articles.

## Architecture & Software Design

### **Frontend Architecture**
- **Framework**: Next.js 15.3.5 with App Router
- **UI Pattern**: Component-based architecture using shadcn/ui design system
- **Styling**: Tailwind CSS with CSS variables for theming
- **State Management**: React hooks for local state, server-side data fetching
- **Responsive Design**: Mobile-first approach with responsive breakpoints

### **Backend Architecture** 
- **Database**: PostgreSQL via Supabase
- **Data Access Layer**: Custom TypeScript service layer (`data-service.ts`) with type-safe interfaces
- **Authentication Ready**: Row-level security policies configured but not yet implemented
- **API Pattern**: Direct database queries through Supabase client (no REST API layer)

### **Database Design**
- **Core Entity**: `factoids` - structured news summaries with bullet points, confidence scores
- **Content Pipeline**: `sources` → `scraped_content` → `factoids` (aggregation flow)
- **Categorization**: Hierarchical tag system with confidence-scored associations
- **Multi-language**: Full support for English, Hebrew, Arabic content with RTL text handling
- **User Features**: Prepared for interactions, subscriptions, preferences (schema ready)
- **Performance**: Optimized with batch queries, full-text search indexes, and efficient joins

## Tech Stack

### **Core Technologies**
- **Runtime**: React 19.0.0, Next.js 15.3.5, TypeScript 5
- **Database**: Supabase (PostgreSQL) with real-time capabilities
- **Styling**: Tailwind CSS 4 with PostCSS
- **UI Components**: Radix UI primitives via shadcn/ui
- **Icons**: Lucide React
- **Development**: ESLint, Turbopack for fast dev builds

### **Infrastructure**
- **Deployment**: Vercel platform with optimized configuration (vercel.json)
- **Hosting**: Vercel serverless hosting with global CDN
- **Environment**: Environment variables for Supabase configuration
- **Performance**: Built-in caching, optimized queries, skeleton loading states
- **Platform Constraints**: Current Vercel hosting may limit certain server-side features for future expansion

## Core Functionality

### **Content Management**
- **News Aggregation**: Ingestion from multiple sources with metadata preservation
- **Factoid Processing**: Conversion of articles into structured, bullet-pointed summaries
- **Multi-language Support**: Native Hebrew/Arabic RTL support with language-specific formatting
- **Tag-based Organization**: Intelligent categorization with confidence scoring

### **User Experience**
- **Feed Interface**: Card-based layout with expandable summaries
- **Topic Filtering**: Dynamic filtering by tags/categories
- **Article Details**: Full factoid view with source verification
- **Responsive Design**: Optimized for mobile and desktop consumption
- **Dark/Light Theme**: Built-in theme switching

### **Data Features**
- **Search Capabilities**: Full-text search with fallback mechanisms
- **Source Tracking**: Multiple source attribution with relevance scoring
- **Content Verification**: Confidence scoring for factoids and tag associations
- **Performance Optimization**: Batch queries to prevent N+1 problems

### **Future-Ready Features**
- **User System**: Complete user management schema (inactive)
- **Interaction System**: Like/dislike, comments, bookmarks (UI implemented)
- **Analytics**: Event tracking infrastructure
- **Image Generation**: Prepared schema for AI-generated article images

## Codebase Structure & Organization

### **Root Level Configuration**
```
├── package.json              # Dependencies and scripts
├── tsconfig.json            # TypeScript configuration
├── next.config.ts           # Next.js configuration
├── postcss.config.mjs       # PostCSS configuration
├── eslint.config.mjs        # ESLint configuration
├── components.json          # shadcn/ui configuration
├── vercel.json             # Vercel deployment settings
├── env.example             # Environment variables template
└── PROJECT_RULES.md        # Project guidelines
```

### **Application Structure (`app/` directory)**
```
app/
├── layout.tsx              # Root layout with header, navigation, theme
├── page.tsx               # Homepage with news feed and filtering
├── globals.css            # Global styles and CSS variables
├── not-found.tsx          # 404 error page
├── favicon.ico            # Application favicon
├── article/
│   └── [id]/
│       └── page.tsx       # Dynamic article detail page
└── settings/
    └── page.tsx           # Settings page (theme toggle, preferences)
```

**Key Application Files:**
- **`layout.tsx`**: Defines global layout with sticky header, navigation (Settings, Theme Toggle), and main content wrapper
- **`page.tsx`**: Main feed interface with topic filtering, article cards, expandable summaries, and loading states
- **`article/[id]/page.tsx`**: Detailed article view with bullet points, sources, RTL support, and back navigation

### **UI Components (`components/` directory)**
```
components/
└── ui/
    ├── avatar.tsx         # User avatar component (Radix UI)
    ├── badge.tsx          # Tag/category badges
    ├── button.tsx         # Primary button component with variants
    ├── card.tsx           # Article card layout components
    ├── input.tsx          # Form input elements
    ├── label.tsx          # Form labels
    ├── skeleton.tsx       # Loading skeleton animations
    ├── switch.tsx         # Toggle switch component
    └── theme-toggle.tsx   # Dark/light mode switcher
```

**Component Architecture:**
- **shadcn/ui Pattern**: Radix UI primitives with custom styling
- **Variant System**: Class Variance Authority for component variants
- **Composable Design**: Card components (CardHeader, CardContent, etc.)
- **Accessibility**: Built-in ARIA attributes and keyboard navigation

### **Library & Utilities (`lib/` directory)**
```
lib/
├── data-service.ts        # Main data access layer (513 lines)
├── supabase.ts           # Supabase client configuration
├── rtl-utils.ts          # Right-to-left text utilities
├── utils.ts              # General utility functions
└── mock-data.ts          # Sample data for development
```

**Key Library Files:**
- **`data-service.ts`**: 
  - TypeScript interfaces for all data models
  - Batch query optimization to prevent N+1 problems
  - Full-text search with fallback mechanisms
  - Legacy compatibility layer for article format
  - Functions: `getAllFactoids()`, `searchFactoids()`, `getFactoidsByTag()`

- **`rtl-utils.ts`**: 
  - Language detection and RTL support
  - CSS class generators for text direction
  - Flex direction utilities for RTL layouts

### **Database Schema (`database/` directory)**
```
database/
└── veritas-migration.sql  # Complete database schema (484 lines)
```

**Database Structure:**
- **14 interconnected tables** with foreign key relationships
- **Row-level security** policies for user data protection
- **Performance indexes** for search and filtering
- **Sample data** with realistic multilingual content
- **Backup mechanisms** and rollback procedures

### **Development & Configuration Files**
```
├── LICENSE                # MIT license
├── README.md             # Comprehensive setup guide (154 lines)
├── package-lock.json     # Dependency lock file
├── .gitignore           # Git ignore patterns
└── public/              # Static assets (favicons, icons)
```

### **Code Organization Patterns**

**1. Type Safety & Interfaces**
- Comprehensive TypeScript interfaces for all data models
- Strict type checking with proper error handling
- Generic types for reusable components

**2. Component Structure**
- Single Responsibility Principle for components
- Props interfaces for type safety
- Consistent naming conventions (PascalCase for components)

**3. Data Flow Architecture**
- Server-side data fetching in page components
- Client-side state management with React hooks
- Optimistic updates for user interactions

**4. Performance Optimizations**
- Batch database queries to reduce round trips
- Skeleton loading states for better UX
- Image placeholders to prevent layout shift
- Efficient re-rendering with proper dependency arrays

**5. Internationalization Structure**
- Language-aware text direction utilities
- RTL-compatible flex layouts
- Localized date formatting
- Multi-language content support in database

**6. Error Handling Strategy**
- Graceful fallbacks for failed API calls
- 404 page for missing articles
- Console error logging for debugging
- User-friendly error messages

## Key Design Decisions

1. **Factoid-Centric**: News presented as structured facts rather than traditional articles
2. **Multi-source Verification**: Every factoid linked to multiple verified sources
3. **Language Inclusivity**: First-class Hebrew support with proper RTL handling
4. **Performance First**: Optimized queries and component loading patterns
5. **Scalable Architecture**: Separation of concerns with modular service layers
6. **Type-Safe Development**: Comprehensive TypeScript usage throughout
7. **Component Reusability**: shadcn/ui system for consistent, accessible components

## Deployment & Hosting

### **Current Platform: Vercel**
- **Hosting Provider**: Vercel serverless platform
- **Deployment Method**: Git-based automatic deployments
- **Global Distribution**: Edge network with automatic CDN
- **Build Process**: Next.js optimized builds with static generation
- **Environment Management**: Vercel environment variables integration

### **Vercel Configuration**
- **vercel.json**: Custom deployment configuration
- **Serverless Functions**: Next.js API routes deployed as serverless functions
- **Static Assets**: Optimized delivery through Vercel Edge Network
- **Domain Management**: Custom domain support with automatic HTTPS

### **Platform Limitations & Considerations**
- **Serverless Constraints**: 15-second function timeout limit
- **Background Jobs**: No persistent processes or cron jobs
- **File System**: Read-only file system in production
- **Database**: External database required (currently Supabase)
- **Long-running Operations**: May require external job queues for heavy processing
- **Real-time Features**: Limited to WebSocket alternatives or third-party services

### **Future Migration Considerations**
- **Alternative Platforms**: AWS, Google Cloud, or dedicated servers for advanced features
- **Container Support**: Docker deployment for complex background processing
- **Microservices**: Potential need for separate services for heavy computational tasks
- **Database Proximity**: Consider database location for latency optimization

## Development Workflow

### **Available Scripts**
- `npm run dev`: Development server with Turbopack
- `npm run build`: Production build
- `npm run start`: Start production server
- `npm run lint`: ESLint code analysis

### **Environment Setup**
- Supabase URL and anonymous key configuration
- Local development with hot reloading
- TypeScript strict mode enabled
- ESLint with Next.js recommended rules

### **Deployment Process**
- **Automatic Deployments**: Push to main branch triggers production deployment
- **Preview Deployments**: Pull requests generate preview URLs
- **Environment Variables**: Managed through Vercel dashboard
- **Build Optimization**: Automatic static optimization and code splitting

This architecture positions the project well for expansion into user personalization, real-time content processing, and advanced analytics while maintaining the core focus on factual, verified news presentation. However, future features requiring long-running processes, background jobs, or server-side persistence may necessitate migration to a more flexible hosting platform. 